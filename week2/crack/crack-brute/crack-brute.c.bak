/* * * * * * * * * * * * * * * * * * * *
 * crack-brute.c is a tool for brute force cracking a password.
 * The password must be between one and eight characters, inclusive.
 * Currently, it is not optimized in the slightest.
 * It is probably the least optimized it could possibly be.
 * 
 * USAGE: crack-brute hash
 * The "hash" must be a (salted) output from crypt(3).
 * 
 * Ezra Celli
 * ezraandrewcelli@gmail.com
 *
 * * * * * * * * * * * * * * * * * * * */

#define _XOPEN_SOURCE
#include <stdio.h>
#include <unistd.h>
#include <string.h>

void cracking(char *pass, char *salt, char *hash);

int main(int argc, char *argv[]) {
    // error checking
    if (argc != 2) {
        printf("USAGE: crack-brute hash\n");
        return 1;
    }
    
    // collect user-inputted values
    char *hash = argv[1];
    char salt[2] = {argv[1][0], argv[1][1]};
    
    // iterate through each possible string length
    for (int i = 1; i < 10; i++) {
        
        // declare a string of length i
        // length of pass will go from 1 to 8 + \0
        char pass[i];
        pass[i - 1] = '\0';
        
        // check for blank pass
        if (strcmp(crypt(pass, salt), hash) == 0) {
            printf("pass is blank\n");
            return 0;
        }
        
        // iterate through each character
        // character number will go from 0 to length of pass
        for (int j = 0; j < i; j++) {
            
            // TODO THERE HAS GOT TO BE AN EASIER WAY TO DO THIS
            if (j == 0) {
                
                // iterate through each value for the current character
                for (int k = ' '; k < 127; k++) {
                    
                    // set pass to every possible character
                    pass[0] = k;
                
                    // compare outputput of crypt(cmp, salt) to input
                    if (strcmp(crypt(pass, salt), hash) == 0) {
                        printf("pass: %s\n", pass);
                        return 0;
                    }
                }
            } else if (j == 1) {
                for (int k = ' '; k < 127; k++) {
                    pass [j - 1] = k;
                    for (int l = ' '; l < 127; l++) {
                        pass[j] = l;
                        if (strcmp(crypt(pass,salt), hash) == 0) {
                            printf("pass: %s\n", pass);
                            return 0;
                        }
                    }
                }
            } else if (j == 2) {
                for (int k = ' '; k < 127; k++) {
                    pass [0] = k;
                    for (int l = ' '; l < 127; l++) {
                        pass[1] = l;
                        for (int m = ' '; m < 127; m++) {
                            pass[2] = m;
                            if (strcmp(crypt(pass,salt), hash) == 0) {
                                printf("pass: %s\n", pass);
                                return 0;
                            }
                        }
                    }
                }
            } else if (j == 3) {
                for (int k = ' '; k < 127; k++) {
                    pass [0] = k;
                    for (int l = ' '; l < 127; l++) {
                        pass[1] = l;
                        for (int m = ' '; m < 127; m++) {
                            pass[2] = m;
                            for (int n = ' '; n < 127; n++) {
                                pass[3] = n;
                                if (strcmp(crypt(pass,salt), hash) == 0) {
                                    printf("pass: %s\n", pass);
                                    return 0;
                                }
                            }
                        }
                    }
                }
            } else if (j == 4) {
                for (int k = ' '; k < 127; k++) {
                    pass [0] = k;
                    for (int l = ' '; l < 127; l++) {
                        pass[1] = l;
                        for (int m = ' '; m < 127; m++) {
                            pass[2] = m;
                            for (int n = ' '; n < 127; n++) {
                                pass[3] = n;
                                for (int o = ' '; o < 127; o++) {
                                    pass[4] = o;
                                    if (strcmp(crypt(pass,salt), hash) == 0) {
                                        printf("pass: %s\n", pass);
                                        return 0;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            // end disgusting conditionals
        }
    }
}
